// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingRegistrationAPI.Context;

namespace TrainingRegistrationAPI.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20211123050018_edit_relation")]
    partial class edit_relation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Tb_M_Account");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.AccountRole", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Tb_M_AccountRole");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseFee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TopicId");

                    b.ToTable("Tb_M_Course");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Tb_M_Employee");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Modul", b =>
                {
                    b.Property<int>("ModulId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("ModulContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModulDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModulTittle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModulId");

                    b.HasIndex("CourseId");

                    b.ToTable("Tb_M_Moduls");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegisteredCourseId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalPayment")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("RegisteredCourseId")
                        .IsUnique();

                    b.ToTable("Tb_M_Payment");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.RegisteredCourse", b =>
                {
                    b.Property<int>("RegisteredCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("RegisteredCourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Tb_M_RegisteredCourse");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Tb_M_Role");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TopicDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId");

                    b.ToTable("Tb_M_Topic");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegisteredCourseId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("RegisteredCourseId");

                    b.ToTable("Tb_M_User");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.AccountRole", b =>
                {
                    b.HasOne("TrainingRegistrationAPI.Models.Account", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingRegistrationAPI.Models.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Course", b =>
                {
                    b.HasOne("TrainingRegistrationAPI.Models.Employee", "Employee")
                        .WithMany("Course")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("TrainingRegistrationAPI.Models.Topic", "Topic")
                        .WithMany("Course")
                        .HasForeignKey("TopicId");

                    b.Navigation("Employee");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Employee", b =>
                {
                    b.HasOne("TrainingRegistrationAPI.Models.Account", "Account")
                        .WithOne("Employee")
                        .HasForeignKey("TrainingRegistrationAPI.Models.Employee", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Modul", b =>
                {
                    b.HasOne("TrainingRegistrationAPI.Models.Course", "Course")
                        .WithMany("Modul")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Payment", b =>
                {
                    b.HasOne("TrainingRegistrationAPI.Models.RegisteredCourse", "RegisteredCourse")
                        .WithOne("Payment")
                        .HasForeignKey("TrainingRegistrationAPI.Models.Payment", "RegisteredCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredCourse");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.RegisteredCourse", b =>
                {
                    b.HasOne("TrainingRegistrationAPI.Models.Course", "Course")
                        .WithMany("RegisteredCourse")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.User", b =>
                {
                    b.HasOne("TrainingRegistrationAPI.Models.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("TrainingRegistrationAPI.Models.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingRegistrationAPI.Models.RegisteredCourse", "RegisteredCourse")
                        .WithMany("User")
                        .HasForeignKey("RegisteredCourseId");

                    b.Navigation("Account");

                    b.Navigation("RegisteredCourse");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Account", b =>
                {
                    b.Navigation("AccountRoles");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Course", b =>
                {
                    b.Navigation("Modul");

                    b.Navigation("RegisteredCourse");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Employee", b =>
                {
                    b.Navigation("Course");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.RegisteredCourse", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Role", b =>
                {
                    b.Navigation("AccountRoles");
                });

            modelBuilder.Entity("TrainingRegistrationAPI.Models.Topic", b =>
                {
                    b.Navigation("Course");
                });
#pragma warning restore 612, 618
        }
    }
}
